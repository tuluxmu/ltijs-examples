{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","height","alignContent","submit","margin","logodiv","marginBottom","logo","cursor","slider","sliderstyle","Boolean","window","location","hostname","match","ReactDOM","render","maxSnack","anchorOrigin","vertical","horizontal","classes","enqueueSnackbar","useSnackbar","React","useState","value","setValue","successPrompt","grade","a","async","variant","errorPrompt","Container","component","maxWidth","className","params","width","particles","number","size","color","CssBaseline","Grid","container","item","xs","src","onClick","open","focus","disableSpinner","Typography","gutterBottom","Slider","onChange","event","newValue","aria-labelledby","thumbColorPrimary","rail","track","Input","input","target","Number","onBlur","inputProps","step","min","max","type","Fab","aria-label","e","preventDefault","ltik","sessionStorage","getItem","searchParams","URLSearchParams","search","get","Error","setItem","url","ky","post","json","text","console","log","extendedIcon","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbe1ec76.chunk.js","sourcesContent":["import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport Image from 'material-ui-image'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from '@material-ui/core/Container'\nimport Slider from '@material-ui/core/Slider'\nimport Input from '@material-ui/core/Input'\nimport Particles from 'react-particles-js'\nimport Fab from '@material-ui/core/Fab'\nimport NavigationIcon from '@material-ui/icons/Navigation'\nimport ky from 'ky'\nimport { useSnackbar } from 'notistack'\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(0),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: '100%',\n    alignContent: 'center'\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  logodiv: {\n    marginBottom: theme.spacing(8),\n    backgroundColor: 'transparent '\n  },\n  logo: {\n    cursor: 'pointer'\n  },\n  slider: {\n    backgroundColor: '#013b6c'\n  },\n  sliderstyle: {\n    marginTop: theme.spacing(3)\n  },\n  margin: {\n    marginTop: theme.spacing(4),\n    backgroundColor: '#013b6c'\n  }\n}))\n\nexport default function App () {\n  const classes = useStyles()\n  const { enqueueSnackbar } = useSnackbar()\n  const [value, setValue] = React.useState(70)\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  const handleInputChange = event => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value))\n  }\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0)\n    } else if (value > 100) {\n      setValue(100)\n    }\n  }\n\n  const successPrompt = async (grade) => {\n    enqueueSnackbar('Grade ' + grade + ' succesfully sent!', { variant: 'success' })\n  }\n\n  const errorPrompt = async () => {\n    enqueueSnackbar('Failed trying to send grade to platform!', { variant: 'error' })\n  }\n\n  const submit = async e => {\n    const grade = value\n    try {\n      e.preventDefault()\n      let ltik = window.sessionStorage.getItem('ltik')\n\n      if (!ltik) {\n        const searchParams = new URLSearchParams(window.location.search)\n        ltik = searchParams.get('ltik')\n        if (!ltik) throw new Error('Missing lti key.')\n        window.sessionStorage.setItem('ltik', ltik)\n      }\n\n      const body = {\n        grade: grade\n      }\n\n      const url = 'grade?ltik=' + ltik\n      const res = await ky.post(url, { json: body }).text()\n      if (res === 'Grade Succesfully Created') successPrompt(grade)\n      else errorPrompt()\n    } catch (err) {\n      console.log(err)\n      errorPrompt()\n    }\n  }\n\n  const ltijs = async () => {\n    const win = window.open('https://cvmcosta.me/ltijs', '_blank')\n    win.focus()\n  }\n\n  return (\n    <Container component='main' maxWidth='xs'>\n      <Particles className='polygon' params={{\n        width: '100%',\n        height: '100%',\n        particles: {\n          number: {\n            value: 40\n          },\n          size: {\n            value: 3\n          },\n          color: {\n            value: '#013b6c'\n          }\n        }\n      }} />\n      <CssBaseline />\n      <div className={classes.paper}>\n\n        <Grid container className={classes.logo}>\n          <Grid item xs className='blank'>\n            <Image\n              className={classes.logo}\n              src='https://raw.githubusercontent.com/Cvmcosta/ltijs/987de79b9a3d529b1b507baa7b7a95d32ab386c2/docs/logo-300.svg?sanitize=true'\n              onClick={ltijs}\n              disableSpinner\n            />\n          </Grid>\n        </Grid>\n        <Typography variant='h5' gutterBottom>\n          Select your grade:\n        </Typography>\n        <Grid container spacing={2} alignItems='center'>\n          <Grid item xs>\n            <Slider\n              value={typeof value === 'number' ? value : 0}\n              onChange={handleSliderChange}\n              aria-labelledby='input-slider'\n              color='primary'\n              classes={{ thumbColorPrimary: classes.slider, rail: classes.slider, track: classes.slider }}\n              className={classes.sliderstyle}\n            />\n          </Grid>\n          <Grid item>\n            <Input\n              className={classes.input}\n              value={value}\n              margin='none'\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              inputProps={{\n                step: 10,\n                min: 0,\n                max: 100,\n                type: 'number',\n                'aria-labelledby': 'input-slider'\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Fab variant='extended' color='primary' aria-label='add' className={classes.margin} onClick={submit}>\n          <NavigationIcon className={classes.extendedIcon} />\n          Submit\n        </Fab>\n      </div>\n      {/* <Box mt={8}>\n        <Copyright />\n      </Box> */}\n    </Container>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { SnackbarProvider } from 'notistack'\n\nReactDOM.render(<SnackbarProvider maxSnack={3}\n  anchorOrigin={{\n    vertical: 'top',\n    horizontal: 'center'\n  }}><App /></SnackbarProvider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}